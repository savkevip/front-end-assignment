@layout('layouts/main')
@set('title', 'Checkout page')

@section('body')
  <div class="checkout-container">
    <form id="order"class="checkout-container-box">
      @!component('components/personal-info-form')
      @!component('components/payment-details-form')
      <div class="checkout-container-button-wrapper">
        @!component('components/ui/button', {
          label: "Complete purchase",
          icon: "cart",
          type: "submit",
          disabled: !state.cart.items.length
        })
      </div>
      <div id="form-message" class="form-message"></div>
    </form>
    <div class="checkout-container-box">
      @!component('components/order-summary', {
        cart: state.cart || { items: [], totals: {} }
      })
    </div>
    <script>
      (function() {
        const SUCCESS_REQUEST = 200;
        const MIN_TEXT_LENGTH = 50;
        const MAX_CVV_LENGTH = 3;
        const MAX_CARD_NUMBER_LENGTH = 16;
        const MAX_EXP_DATE_LENGTH = 5;
        const EMPTY_STRINGIFIED_OBJECT_LENGTH = 2;
        
        const ERRORS = {
          firstName: {
            validate: function(input) {
              return input.length && input.length <= MIN_TEXT_LENGTH;
            },
            message: "Invalid first name"
          },
          lastName: {
            validate: function(input) {
              return input.length && input.length <= MIN_TEXT_LENGTH;
            },
            message: "Invalid last name"
          },
          email: {
            validate: function(input) {
              return input.match("[a-z0-9._%+-]+@[a-z0-9.-]+\.[a-z]{2,4}$");
            },
            message: "Invalid email"
          },
          country: {
            validate: function(input) {
              return input.length;
            },
            message: "Invalid country selection",
          },
          phone: {
            validate: function(input) {
              return input.length;
            },
            message: "Invalid phone number"
          },
          postalCode: {
            validate: function(input) {
              return input.match("^[0-9]{5}$");
            },
            message: "Invalid postal code"
          },
          creditCard: {
            validate: function(input) {
              return input.match("^[0-9]{16}$");
            },
            message: "Invalid card number"
          },
          CVV: {
            validate: function(input) {
              return input.match("^[0-9]{3}$");
            },
            message: "Invalid security code"
          },
          expDate: {
            validate: function(input) {
              return input.match("^[0-9]{2}\/[0-9]{2}$");
            },
            message: "Invalid expiration date"
          }
        };

        const messageElement = document.getElementById("form-message");

        const resetOnDefaultCardIcon = function() {
          const iconElement = document.getElementById("creditCardIcon").firstElementChild;

          iconElement.setAttribute("class", "icon");
          iconElement.setAttribute("src", "/icons/question-mark.svg");
          return;
        }

        const renderErrorMessage = function(message) {
            const parseMessage = Object.keys(JSON.parse(message)).map(function(key) {
              return `${ERRORS[key].message}; `;
            });
            messageElement.setAttribute("class", "form-message form-message-error");
            messageElement.innerHTML = message ? parseMessage.join("") : "Oh! Something went wrong.";
        }

        const renderSuccessMessage = function(message, form) {
          const parsedMessage = JSON.parse(message);
          messageElement.setAttribute("class", "form-message form-message-success");
          messageElement.innerHTML = parsedMessage.message;
          resetOnDefaultCardIcon()
          form.reset();
        }

        const getValidateMessages = function(data) {
          const keys = Object.keys(data);

          const messages = {};

          keys.forEach(function(key) {
            const value = data[key];
            const validate = ERRORS[key].validate;

            if (!validate(value)) {
              messages[key] = true;
            }
          });

          return JSON.stringify(messages);
        }

        window.addEventListener("load", function () {
            function sendOrder() {
              const XHR = new XMLHttpRequest();
              const FD = new FormData( form );

              const data = Object.fromEntries(FD.entries()); 
              const validationMessages = getValidateMessages(data);
              if (validationMessages.length > EMPTY_STRINGIFIED_OBJECT_LENGTH) {
                return renderErrorMessage(validationMessages);
              }
        
              messageElement.innerHTML = "";
        
              XHR.addEventListener("load", function(event) {
                const message = event.target.responseText;
                
                if (event.target.status !== SUCCESS_REQUEST) {
                  return renderErrorMessage(message);
                } else {
                  return renderSuccessMessage(message, form);
                }
              });
        
              XHR.addEventListener( "error", function() {
                return renderErrorMessage();
              } );
          
              XHR.open("POST", "/order");
          
              XHR.send(FD);
            }
          
            const form = document.getElementById("order");
          
            form.addEventListener("submit", function ( event ) {
              event.preventDefault();
              sendOrder();
            });
          });
      })()
    </script>
  </div>
@end
